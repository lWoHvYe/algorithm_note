package com.lwohvye.tree;

// 二分搜索树、二叉查找树
// 二分搜索树（英语：Binary Search Tree），也称为 二叉查找树 、二叉搜索树 、有序二叉树或排序二叉树。满足以下几个条件：
//  若它的左子树不为空，左子树上所有节点的值都小于它的根节点。
//  若它的右子树不为空，右子树上所有的节点的值都大于它的根节点。
//  它的左、右子树也都是二分搜索树。

//二分搜索树有着高效的插入、删除、查询操作。
//平均时间的时间复杂度为 O(log n)，最差情况为 O(n)。二分搜索树与堆不同，不一定是完全二叉树，底层不容易直接用数组表示故采用链表来实现二分搜索树

// 二分搜索树遍历分为两大类，深度优先遍历和层序遍历。
//深度优先遍历分为三种：先序遍历（preorder tree walk）、中序遍历（inorder tree walk）、后序遍历（postorder tree walk），分别为：
//  1、前序遍历：先访问当前节点，再依次递归访问左右子树。
//  2、中序遍历：先递归访问左子树，再访问自身，再递归访问右子树。
//  3、后序遍历：先递归访问左右子树，再访问自身节点。
public class BinarySearchTree {

}
